#################################
####### Theme settings ##########
#################################

set -g status-justify absolute-centre
set -g window-status-format "#{?window_index,,#S: }#W#F"
set -g window-status-current-format "#{?window_index,,#S: }#[fg=blue,bold]#W#F"

set-option -g status-interval 1

# set-option -g status-utf8 on

# default statusbar color
set-option -g status-style bg=default,fg=white

# default window with an activity alert
set-window-option -g window-status-activity-style bg=green,fg=white

# pane border
set-option -g pane-active-border-style fg=blue
set-option -g pane-border-style fg=white

# message infos like reloaded message
set-option -g message-style bg=default,fg=white

# vim-tpipeline settings
set -g focus-events on
# set -g status-style bg=default
set -g status-left-length 90
set -g status-right-length 90
# set -g status-justify centre

set -g status-left ""
set -g status-right ""

#################################
####### Misc bindings ###########
#################################

# Shift arrow to navigate windows
bind -n S-Left  previous-window
bind -n S-Right next-window

bind k display-popup -E "omnitmux.sh"

# Use vi or emacs-style key bindings in the status line,
# for example at the command prompt.
set-option -g status-key vi

# Use vi or emacs-style key bindings in copy mode.
setw -g mode-keys vi

set-option -g allow-rename off

# Reload config file
unbind r
# TODO: remove hard coding here and in last line
bind r source-file ~/.config/tmux/tmux.conf \; display "Reloaded tmux config"

# Mouse mode
set-option -g mouse on

# Disable delay
set-option -g repeat-time 0
set-option -g escape-time 0

# {{{ fix colorscheme for neovim

set -g default-terminal "${TERM}"

# kitty terminal rgb support
set-option -sa terminal-features ',xterm-kitty:RGB'

# wezterm terminal rgb support
# set -as terminal-features ",xterm-256color:RGB"

# set -g terminal-overrides ',xterm-256color:Tc'
# set -as terminal-overrides ',xterm*:sitm=\E[3m'
# set -ag terminal-overrides ",$TERM:RGB"

# }}}

# switch to another session if current session is killed
set-option -g detach-on-destroy off

# Settings for Undercurl https://github.com/folke/lsp-colors.nvim
# need to test this
# set -g default-terminal "${TERM}"
# set -as terminal-overrides ',*:Smulx=\E[4::%p1%dm'  # undercurl support
# set -as terminal-overrides ',*:Setulc=\E[58::2::%p1%{65536}%/%d::%p1%{256}%/%{255}%&%d::%p1%{255}%&%d%;m'  # underscore colours - needs tmux-3.0

#################################
####### Navigation ##############
#################################
# Switch windows 
# usage: "Alt+ i o" (without prefix key)
bind-key -n M-i previous-window
bind-key -n M-o next-window
bind-key -n M-\; last-window

# Switch to last session
bind-key -n M-u switch-client -l

# set default directory for new windows in this session to current directory
bind C attach-session -c "#{pane_current_path}"

#################################
####### Remap prefix ############
#################################
set-option -g prefix C-a
unbind C-b

# type prefix twice to send to prefix characters to other apps
bind C-a send-prefix


#################################
# Create Panes: window splitting
#################################
# create a new 40 column pane
bind-key C-v split-window -v -p 25


#################################
####### Plugin configuration ####
#################################

# tmux resurrect and continuum
# set -g @continuum-restore 'on'
#set -g status-right 'Continuum status: #{continuum_status}'
set -g @resurrect-hook-pre-restore-pane-processes 'tmux switch-client -n && tmux kill-session -t=0'
# restore vim
set -g @resurrect-strategy-vim 'session'
# restore neovim
set -g @resurrect-strategy-nvim 'session'

# To yank with the mouse, click and drag with the primary button
# to begin selection, and release to yank.
# supported by tmux-yank plugin
set -g @yank_with_mouse on # or 'off'

# Linux has several cut-and-paste clipboards: primary, secondary,
# and clipboard (default in tmux-yank is clipboard).
# With mouse support turned on the default clipboard 
# for mouse selections is primary, therefore the copying with mouse
# won't work as expected unless both copies to same clipboard.
set -g @yank_selection_mouse 'clipboard' # or 'primary' or 'secondary


#################################
####### Plugin ##################
#################################

set -g @plugin 'tmux-plugins/tpm'

# Themes
# set -g @plugin "arcticicestudio/nord-tmux"
# set -g @plugin 'egel/tmux-gruvbox'

# Session management
set -g @plugin 'tmux-plugins/tmux-resurrect'
# auto save and restore session
# set -g @plugin 'tmux-plugins/tmux-continuum'

# Ctrl hjkl to navigate
# Add this plugin to vim to navigate between tmux
# and vim panes seamlessly
set -g @plugin 'christoomey/vim-tmux-navigator'
# use Meta hjkl to resize panes
set -g @plugin 'RyanMillerC/better-vim-tmux-resizer'

# Easy copy to clipboard mode
set -g @plugin 'tmux-plugins/tmux-yank'

# regex searches, higlight are already provided by tmux 3.1
# This plugin has support for regex search
# also predefined searches like searching for url, file etc
# prefix + ctrl-f - simple file search
# prefix + ctrl-g - jumping over git status files (best used after git status command)
# prefix + alt-h - jumping over SHA-1/SHA-256 hashes (best used after git log command)
# prefix + ctrl-u - url search (http, ftp and git urls)
# prefix + ctrl-d - number search (mnemonic d, as digit)
# prefix + alt-i - ip address search
# will be using this plugin for regex search mostly
set -g @plugin 'tmux-plugins/tmux-copycat'

# Press ( prefix + F ) to enter [fingers] mode,
# it will highlight relevant stuff in the current pane along with letter hints.
# a-z: copies selected match to the clipboard
# CTRL + a-z: copies selected match to the clipboard and triggers @fingers-ctrl-action.
# By default it triggers :open: action, which is useful for opening links in the browser for example.
# SHIFT + a-z: copies selected match to the clipboard and triggers @fingers-shift-action.
# By default it triggers :paste: action, which automatically pastes selected matches.
# ALT + a-z: copies selected match to the clipboard and triggers @fingers-alt-action.
# There is no default, configurable by the user.
# TAB: toggle multi mode. First press enters multi mode, which allows to select multiple matches.
# Second press will exit with the selected matches copied to the clipboard.
# q, ESC or CTRL + c: exit [fingers] mode
set -g @plugin 'Morantron/tmux-fingers'

# https://github.com/laktak/extrakto
# complete commands that require you to retype text that is already on the screen.
# This works everywhere, even in remote ssh sessions.
# press tmux prefix + tab to start extrakto
# fuzzy find the text/path/url/line
# use custom filters (ctrl + f)
# press tab to insert it to the current pane,
# enter to copy it to the clipboard,
# see other features in HELP (press ctrl-h in extrakto)
# A complement to tmux-copycat not replacement
# copycat navigates to location therefore gives more context
set -g @plugin 'laktak/extrakto'

set -g @plugin 'whame/tmux-modal'

set -g @plugin 'nhdaly/tmux-better-mouse-mode'

# tmux-better-mouse-mode also has option to enable feature similar to this
# Works in scenarios like $ git log, $ find | less, etc.
# Works in other applications like fzf, mc, man, ranger, vim, etc.
set -g @plugin 'noscript/tmux-mighty-scroll'

# you can complete commands that require you to retype
# text that is already on the screen.
# This works everywhere, even in remote ssh sessions.
# set -g @plugin 'laktak/extrakto'

# Use Prefix+I to install plugin
# Initialize TMUX plugin manager 
# (keep this line at the very bottom of tmux.conf)

# Change location of tmux plugin
set-environment -g TMUX_PLUGIN_MANAGER_PATH '~/.local/share/tmux/plugins'

# Automate install of tmp plugin manager
if "test ! -d ~/.local/share/tmux/plugins/tpm" \
   "run 'git clone https://github.com/tmux-plugins/tpm ~/.local/share/tmux/plugins/tpm && ~/.local/share/tmux/plugins/tpm/bin/install_plugins'"

run -b '~/.local/share/tmux/plugins/tpm/tpm'
